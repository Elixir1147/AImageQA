// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArticleType {
  Question
  Answer
}

model User {
  userName    String       @id
  mailAddress String       @unique
  password    String
  profile     String       @default("")
  alive       Boolean      @default(true)
  Articles    Article[]
  Evaluation  Evaluation[]
  Comments    Comment[]
  BookMarks   BookMark[]
}

model Question {
  questionId     String          @id @default(uuid()) @db.Uuid
  title          String
  viewNumber     Int             @default(0)
  restricted     Boolean
  Articles       Article[]
  BookMarks      BookMark[]
  QuestionToTags QuestionToTag[]
}

model Article {
  articleId   String       @id @default(uuid()) @db.Uuid
  question    Question     @relation(fields: [questionId], references: [questionId])
  questionId  String       @db.Uuid
  user        User         @relation(fields: [userName], references: [userName])
  userName    String
  articleType ArticleType
  atricle     String
  postDate    DateTime     @default(now())
  updatedDate DateTime     @updatedAt
  Evaluation  Evaluation[]
  Comments    Comment[]
  Images      Image[]
}

model Evaluation {
  user       User    @relation(fields: [userName], references: [userName])
  userName   String
  article    Article @relation(fields: [articleId], references: [articleId])
  articleId  String  @db.Uuid
  evaluation Int     @default(0)

  @@id([userName, articleId])
}

model Comment {
  commentId   String   @id @default(uuid()) @db.Uuid
  user        User     @relation(fields: [userName], references: [userName])
  userName    String
  article     Article  @relation(fields: [articleId], references: [articleId])
  articleId   String   @db.Uuid
  comment     String
  commentDate DateTime @default(now())
  updatedDate DateTime @updatedAt
}

model BookMark {
  user       User     @relation(fields: [userName], references: [userName])
  userName   String
  question   Question @relation(fields: [questionId], references: [questionId])
  questionId String   @db.Uuid

  @@id([userName, questionId])
}

model Tag {
  tagId          String          @id @default(uuid()) @db.Uuid
  name           String
  QuestionToTags QuestionToTag[]
}

model QuestionToTag {
  question   Question @relation(fields: [questionId], references: [questionId])
  questionId String   @db.Uuid
  tag        Tag      @relation(fields: [tagId], references: [tagId])
  tagId      String   @db.Uuid

  @@id([questionId, tagId])
}

model Image {
  imageId   String  @id @default(uuid()) @db.Uuid
  article   Article @relation(fields: [articleId], references: [articleId])
  articleId String  @db.Uuid
  place     String
}
